// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="div9,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.759250,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=27,HLS_SYN_LUT=57,HLS_VERSION=2018_3}" *)

module div9 (
        ap_clk,
        ap_rst,
        src_V,
        dst_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [11:0] src_V;
output  [11:0] dst_V;

reg   [11:0] src_V_0_data_reg;
reg    src_V_0_vld_reg;
reg    src_V_0_ack_out;
reg   [11:0] dst_V_1_data_reg;
reg    dst_V_1_vld_reg;
reg    dst_V_1_vld_in;
reg    dst_V_1_ack_in;
wire  signed [11:0] tmp_6_cast_fu_115_p1;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [22:0] p_shl_fu_59_p3;
wire   [19:0] p_shl1_fu_71_p3;
wire   [23:0] p_shl_cast_fu_67_p1;
wire   [23:0] p_shl1_cast_fu_79_p1;
wire   [23:0] r_V_fu_83_p2;
wire   [0:0] tmp_fu_89_p3;
wire   [9:0] tmp_2_fu_97_p4;
wire   [9:0] tmp_6_fu_107_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 src_V_0_data_reg = 12'd0;
#0 src_V_0_vld_reg = 1'b0;
#0 dst_V_1_data_reg = 12'd0;
#0 dst_V_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((dst_V_1_vld_reg == 1'b0) & (dst_V_1_vld_in == 1'b1)) | ((1'b1 == 1'b1) & (dst_V_1_vld_in == 1'b1) & (dst_V_1_vld_reg == 1'b1)))) begin
        dst_V_1_data_reg <= tmp_6_cast_fu_115_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((src_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((src_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (src_V_0_vld_reg == 1'b1)))) begin
        src_V_0_data_reg <= src_V;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((dst_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (dst_V_1_vld_reg == 1'b1)))) begin
        dst_V_1_ack_in = 1'b1;
    end else begin
        dst_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_V_1_vld_in = 1'b1;
    end else begin
        dst_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_0_ack_out = 1'b1;
    end else begin
        src_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((dst_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((dst_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((dst_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (dst_V_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_V = dst_V_1_data_reg;

assign p_shl1_cast_fu_79_p1 = p_shl1_fu_71_p3;

assign p_shl1_fu_71_p3 = {{src_V_0_data_reg}, {8'd0}};

assign p_shl_cast_fu_67_p1 = p_shl_fu_59_p3;

assign p_shl_fu_59_p3 = {{src_V_0_data_reg}, {11'd0}};

assign r_V_fu_83_p2 = (p_shl_cast_fu_67_p1 - p_shl1_cast_fu_79_p1);

assign tmp_2_fu_97_p4 = {{r_V_fu_83_p2[23:14]}};

assign tmp_6_cast_fu_115_p1 = $signed(tmp_6_fu_107_p3);

assign tmp_6_fu_107_p3 = ((tmp_fu_89_p3[0:0] === 1'b1) ? 10'd1023 : tmp_2_fu_97_p4);

assign tmp_fu_89_p3 = r_V_fu_83_p2[32'd23];

endmodule //div9
